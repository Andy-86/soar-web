[]ast.StmtNode{
    &ast.SelectStmt{
        dmlNode: ast.dmlNode{
            stmtNode: ast.stmtNode{
                node: ast.node{text:"select 1"},
            },
        },
        resultSetNode:  ast.resultSetNode{},
        SelectStmtOpts: &ast.SelectStmtOpts{
            Distinct:        false,
            SQLBigResult:    false,
            SQLBufferResult: false,
            SQLCache:        true,
            SQLSmallResult:  false,
            CalcFoundRows:   false,
            StraightJoin:    false,
            Priority:        0,
            TableHints:      nil,
        },
        Distinct: false,
        From:     (*ast.TableRefsClause)(nil),
        Where:    nil,
        Fields:   &ast.FieldList{
            node:   ast.node{},
            Fields: {
                &ast.SelectField{
                    node:     ast.node{text:"1"},
                    Offset:   7,
                    WildCard: (*ast.WildCardField)(nil),
                    Expr:     &driver.ValueExpr{
                        TexprNode: ast.exprNode{
                            node: ast.node{},
                            Type: types.FieldType{
                                Tp:      0x8,
                                Flag:    0x80,
                                Flen:    1,
                                Decimal: 0,
                                Charset: "binary",
                                Collate: "binary",
                                Elems:   nil,
                            },
                            flag: 0x0,
                        },
                        Datum: types.Datum{
                            k:         0x1,
                            collation: 0x0,
                            decimal:   0x0,
                            length:    0x0,
                            i:         1,
                            b:         nil,
                            x:         nil,
                        },
                        projectionOffset: -1,
                    },
                    AsName:    model.CIStr{},
                    Auxiliary: false,
                },
            },
        },
        GroupBy:              (*ast.GroupByClause)(nil),
        Having:               (*ast.HavingClause)(nil),
        WindowSpecs:          nil,
        OrderBy:              (*ast.OrderByClause)(nil),
        Limit:                (*ast.Limit)(nil),
        LockTp:               0,
        TableHints:           nil,
        IsAfterUnionDistinct: false,
        IsInBraces:           false,
    },
}
